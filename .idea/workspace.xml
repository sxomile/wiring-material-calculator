<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="3dd0a8a4-7acf-4e2f-98a1-0e2fd2f49808" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__clj_time_0_15_2.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__clj_tuple_0_2_2.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__colorize_0_1_1.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_rpl_specter_1_1_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__commons_codec_1_15.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__environ_1_2_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__fipp_0_6_26.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__flare_0_2_9.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__io_aviso_pretty_1_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__joda_time_2_10.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__marick_suchwow_6_0_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__midje_1_10_9.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__mvxcvi_arrangement_2_1_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__mvxcvi_puget_1_3_4.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojars_brenton_google_diff_match_patch_0_1.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_core_rrb_vector_0_1_2.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_core_unify_0_5_7.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_java_classpath_1_0_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_math_combinatorics_0_1_6.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_test_check_1_1_1.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_logging_1_2_4.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_macro_0_1_5.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_namespace_1_3_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_clojure_tools_reader_1_3_6.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_tcrawley_dynapath_1_1_0.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__potemkin_0_4_5.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__riddley_0_1_12.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.nrepl-port" beforeDir="false" afterPath="$PROJECT_DIR$/.nrepl-port" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/classes/META-INF/maven/wiring-material-calculator/wiring-material-calculator/pom.properties" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/META-INF/maven/wiring-material-calculator/wiring-material-calculator/pom.properties" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/repl-port" beforeDir="false" afterPath="$PROJECT_DIR$/target/repl-port" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/stale/leiningen.core.classpath.extract-native-dependencies" beforeDir="false" afterPath="$PROJECT_DIR$/target/stale/leiningen.core.classpath.extract-native-dependencies" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/wiring-material-calculator.iml" beforeDir="false" afterPath="$PROJECT_DIR$/wiring-material-calculator.iml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
        <option value="Clojure Test Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 5
}</component>
  <component name="ProjectId" id="2oTXUqKljtoak0raSQx2XjSb1dD" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Clojure REPL.REPL for wiring-material-calculator.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "cursive.last.file.extension.C\\:/Users/PC/Documents/alati-metode-fajlovi/wiring-material-calculator/src": "clj",
    "cursive.last.file.extension.C\\:/Users/PC/Documents/alati-metode-fajlovi/wiring-material-calculator/test": "clj",
    "git-widget-placeholder": "main",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "C:/Users/PC/Documents/alati-metode-fajlovi/wiring-material-calculator",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "settings.editor.selected.configurable": "File.Encoding"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\PC\Documents\alati-metode-fajlovi\wiring-material-calculator\src" />
    </key>
  </component>
  <component name="ReplState" timestamp="1731954788466">{:repl-history {:ide [], :local [{:command &quot;(println \&quot;Hello world!\&quot;)&quot;, :offset 24, :ns &quot;user&quot;} {:command &quot;(slurp \&quot;housing-projects/project1.txt\&quot;)&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(load-file \&quot;housing-projects/project1.txt\&quot;)4&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(clojure.string/replace (load-file \&quot;housing-projects/project1.txt\&quot;) \&quot;\\r\&quot; \&quot;\&quot; )&quot;, :offset 77, :ns &quot;user&quot;} {:command &quot;(load-file \&quot;housing-projects/project1.txt\&quot;)&quot;, :offset 43, :ns &quot;user&quot;} {:command &quot;(clojure.string/replace (slurp \&quot;housing-projects/project1.txt\&quot;) \&quot;\\r\&quot; \&quot;\&quot; )&quot;, :offset 73, :ns &quot;user&quot;} {:command &quot;(clojure.string/replace (clojure.string/replace (slurp \&quot;housing-projects/project1.txt\&quot;) \&quot;\\r\&quot; \&quot;\&quot; ) \&quot;\\\&quot;\&quot; \&quot;\&quot;)&quot;, :offset 106, :ns &quot;user&quot;} {:command &quot;(clojure.string/replace (clojure.string/replace (slurp \&quot;housing-projects/project1.txt\&quot;) \&quot;\\r\&quot; \&quot;\&quot; ) #(\&quot;\\\&quot;\&quot;) \&quot;\&quot;)&quot;, :offset 109, :ns &quot;user&quot;} {:command &quot;(clojure.string/replace (clojure.string/replace (slurp \&quot;housing-projects/project1.txt\&quot;) \&quot;\\r\&quot; \&quot;\&quot; ) #\&quot;\\\&quot;\&quot; \&quot;\&quot;)&quot;, :offset 107, :ns &quot;user&quot;} {:command &quot;(defn load-file [filepath]\n  ( (slurp filepath)\n      (clojure.string/replace \&quot;\\r\&quot; \&quot;\&quot;)\n      (clojure.string/replace \&quot;\\\&quot;\&quot; \&quot;\&quot;)))&quot;, :offset 127, :ns &quot;user&quot;} {:command &quot;(defn load-project [filepath]\n  ( (slurp filepath)\n      (clojure.string/replace \&quot;\\r\&quot; \&quot;\&quot;)\n      (clojure.string/replace \&quot;\\\&quot;\&quot; \&quot;\&quot;)))&quot;, :offset 130, :ns &quot;user&quot;} {:command &quot;(defn load-project [filepath]\n  (clojure.string/replace (slurp \&quot;housing-projects/project1.txt\&quot;) \&quot;\\r\&quot; \&quot;\&quot;))&quot;, :offset 105, :ns &quot;user&quot;} {:command &quot;(file-seq \&quot;housing-projects\&quot;)&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(file-seq (clojure.java.io/file \&quot;housing-projects\&quot;))&quot;, :offset 52, :ns &quot;user&quot;} {:command &quot;(map #(.getPath %)\n     (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;)))&quot;, :offset 77, :ns &quot;user&quot;} {:command &quot;(rest (map #(clojure.string/replace-first (.getPath %) #\&quot;^housing-projects/\&quot; \&quot;\&quot;)\n          (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;)) ))&quot;, :offset 146, :ns &quot;user&quot;} {:command &quot;(rest (map #(.getPath %)\n     (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;))))&quot;, :offset 84, :ns &quot;user&quot;} {:command &quot;(rest (map clojure.string/replace-first #(.getPath %) \&quot;housing-projects\\\\\&quot; \&quot;\&quot;\n     (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;))))&quot;, :offset 137, :ns &quot;user&quot;} {:command &quot;(rest (map clojure.string/replace-first #(.getPath %) #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;\n     (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;))))&quot;, :offset 139, :ns &quot;user&quot;} {:command &quot;(rest (map #(clojure.string/replace-first (.getPath %) #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;)\n          (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;)) ))&quot;, :offset 147, :ns &quot;user&quot;} {:command &quot;(rest (map #(clojure.string/replace-first (.getPath %) #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;)\n          (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;))))&quot;, :offset 146, :ns &quot;user&quot;} {:command &quot;(defn load-existing-project-names [] (rest (map #(clojure.string/replace-first (.getPath %) #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;)\n                                                (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;)))))&quot;, :offset 222, :ns &quot;user&quot;} {:command &quot;(defn get-input\n  ([] (get-input \&quot;\&quot;))\n  ([default]\n   (let [input (clojure.string/trim (read-line))]\n     (if (empty? input)\n       default\n       (clojure.string/lower-case input)))))&quot;, :offset 184, :ns &quot;user&quot;} {:command &quot;(get-input)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(defn print-collection [collection]\n  ((doseq [item collection]\n     (println item))))&quot;, :offset 86, :ns &quot;user&quot;} {:command &quot;(defn load-existing-project-names []\n  (seq (rest (map #(clojure.string/lower-case\n                     (clojure.string/replace-first (.getPath %) #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;))\n                  (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;))))))&quot;, :offset 249, :ns &quot;user&quot;} {:command &quot;(defn load-existing-project-names []\n  (list (rest (map #(clojure.string/lower-case\n                      (clojure.string/replace-first (.getPath %) #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;))\n                   (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;))))))&quot;, :offset 252, :ns &quot;user&quot;} {:command &quot;(defn load-existing-project-names []\n  (rest (map #(clojure.string/lower-case\n                (clojure.string/replace-first (.getPath %) #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;))\n             (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;)))))&quot;, :offset 233, :ns &quot;user&quot;} {:command &quot;(type (load-existing-project-names))&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(doseq [name (load-existing-project-names)]\n  (println name))&quot;, :offset 61, :ns &quot;user&quot;} {:command &quot;(defn print-collection [collection]\n  (doseq [name (load-existing-project-names)]\n    (when name\n      (println name))))&quot;, :offset 120, :ns &quot;user&quot;} {:command &quot;(print-collection load-existing-project-names)&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(str \&quot;housing-projects/\&quot; filename)&quot;, :offset 34, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(str \&quot;housing-projects/\&quot; \&quot;project1.txt\&quot;)&quot;, :offset 40, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(load-project \&quot;housing-projects/project1.txt\&quot;)&quot;, :offset 46, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(slurp (str \&quot;housing-projects/\&quot; \&quot;project1.txt\&quot;))&quot;, :offset 48, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(defn load-project [filename]\n  (clojure.string/replace\n    (slurp (str \&quot;housing-projects/\&quot; filename))\n    \&quot;\\r\&quot; \&quot;\&quot;))&quot;, :offset 116, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(load-project \&quot;project1.txt\&quot;)&quot;, :offset 29, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(main)&quot;, :offset 6, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;wiring-calculator.core&quot;} {:command &quot;load-existing-project-names&quot;, :offset 27, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(load-existing-project-names)&quot;, :offset 29, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(defn load-existing-project-names []\n  (rest (map #(clojure.string/lower-case\n                (clojure.string/replace-first (.getPath %)\n                                              #\&quot;^housing-projects\\\\\&quot; \&quot;\&quot;))\n             (file-seq (clojure.java.io/file \&quot;housing-projects\&quot;)))))&quot;, :offset 279, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(ns wiring-calculator.core-test\n  (:require [clojure.test :refer :all]\n            [midje.sweet :refer [facts =&gt; ]]))&quot;, :offset 117, :ns &quot;wiring-calculator.core&quot;} {:command &quot;(facts \&quot;load-project-names-test\&quot; load-existing-project-names =&gt; (\&quot;project1.txt\&quot; \&quot;project2.txt\&quot; \&quot;project3.txt\&quot;))&quot;, :offset 111, :ns &quot;wiring-calculator.core-test&quot;} {:command &quot;(doc midje)&quot;, :offset 11, :ns &quot;wiring-calculator.core-test&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="Babashka" factoryName="BabashkaLocalRepl" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="bbPath" value="" />
      <setting name="parameters" value="" />
      <option name="PARENT_ENVS" value="true" />
      <setting name="workingDir" value="" />
      <setting name="focusEditor" value="false" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="REPL for wiring-material-calculator" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <option name="configVersion" value="1" />
      <option name="displayName" value="REPL for wiring-material-calculator" />
      <option name="execution" value="LEININGEN" />
      <module name="wiring-material-calculator" />
      <option name="options" />
      <option name="profiles" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <option name="configVersion" value="1" />
      <option name="options" />
      <option name="profiles" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="useHeartbeat" value="true" />
      <setting name="focusEditor" value="false" />
      <setting name="urlFile" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="3dd0a8a4-7acf-4e2f-98a1-0e2fd2f49808" name="Changes" comment="" />
      <created>1730894559948</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730894559948</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>